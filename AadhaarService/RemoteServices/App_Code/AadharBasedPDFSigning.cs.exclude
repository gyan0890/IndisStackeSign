#region using
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Xml;
using System.Text;
using System.Xml;
using iTextSharp.text.pdf;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Security;
#endregion

namespace AadharBasedPDFSigning
{
    public class eSigner
    {
        #region variables
        public string ASPID { get; set; } 
        public string PFXPath { get; set; } 
        public string PFXPassword { get; set; }
        public string eSignURL { get; set; }
        public string OTPURL { get; set; }
        public string AadharNumber { get; set; }
        public string OTP { get; set; }

        public string SIGNATUREREASON { get; set; }
        public string CITY { get; set; }
        public string CERTLOCATION { get; set; } 
        public int SIGNPAGENO { get; set; }
        public string UIDAI_cer { get; set; } 

        private string timeStamp;
        private string transactionID;
        private string responseXML;
        private string requestXML;
        #endregion

        #region Constructor
        public void eSigner()
        {
            SIGNATUREREASON = "eSign Testing";
            CITY = "Bangalore";
            SIGNPAGENO = 1;
            CERTLOCATION = "390,50,590,200";
            UIDAI_cer = "MIIErDCCA5SgAwIBAgIKFh9MnUukpTm2bDANBgkqhkiG9w0BAQsFADBmMQswCQYD"
                        + "VQQGEwJJTjEkMCIGA1UEChMbTmF0aW9uYWwgSW5mb3JtYXRpY3MgQ2VudHJlMQ8w"
                        + "DQYDVQQLEwZTdWItQ0ExIDAeBgNVBAMTF05JQyBzdWItQ0EgZm9yIE5JQyAyMDEx"
                        + "MB4XDTEzMDgwNjA2NTg0MVoXDTE1MDgwNTA2NTg0MVoweDELMAkGA1UEBhMCSU4x"
                        + "DjAMBgNVBAoTBVVJREFJMRowGAYDVQQLExFURUNITk9MT0dZIENFTlRFUjEPMA0G"
                        + "A1UEERMGNTYwMTAzMRIwEAYDVQQIEwlLQVJOQVRBS0ExGDAWBgNVBAMTD1N1ZGhp"
                        + "ciBOYXJheWFuYTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALpngEVc"
                        + "Bq/SHc2Xt1CH/5pykI+otZCaJskY9+b4GjXH0Pc/533qWatu9veqJKDig1Sil56G"
                        + "sSF3CqWrtTNvJlsj4jpLHsIVy/Gg7DgZ0FJ/9aj8OkLs6rbb4+mclPPbZphpCr7O"
                        + "wGwIZqioqRtp8dmoMvKcdze9dr1OOCipAvCgGBXKv6chcSGLQXp3Fma27Mvt2mHw"
                        + "IMS7jJnAgStD/Fnbxf30N1y9pOxdQpD/8p904OFICWyXdAjUHkqGWZnYVRk2P6FG"
                        + "tKJZhYhcG+h2F93SNve5NMbJ6t/N321pmrAmsm7n/uWG26pD8r9uw0Px8/u1tzN7"
                        + "hXQihIMrlC4ZVCcCAwEAAaOCAUgwggFEMB0GA1UdDgQWBBTfC0WfcFs78h0m4YyN"
                        + "yr3mOmlsBjAfBgNVHSMEGDAWgBT6gA8c/HOkx2mQE67vPBCtqq8ZhDAOBgNVHQ8B"
                        + "Af8EBAMCBSAwIQYDVR0RBBowGIEWc3VkaGlyLnVpZGFpQGdtYWlsLmNvbTA4BgNV"
                        + "HSAEMTAvMC0GBmCCZGQCAzAjMCEGCCsGAQUFBwICMBUaE0NsYXNzIDMgQ2VydGlm"
                        + "aWNhdGUwUgYIKwYBBQUHAQEERjBEMEIGCCsGAQUFBzAChjZodHRwOi8vbmljY2Eu"
                        + "bmljLmluL2NlcnQvY2VydF8xNDI5MjZEMkZGMTQ0MzlCMzhGOS5jZXIwQQYDVR0f"
                        + "BDowODA2oDSgMoYwaHR0cDovL25pY2NhLm5pYy5pbi9jcmxfMTQyOTI2RDJGRjE0"
                        + "NDM5QjM4RjkuY3JsMA0GCSqGSIb3DQEBCwUAA4IBAQCveoLaOw0fSqZWqiU4jJeP"
                        + "OUotDDP83LNPgVddqMkuAQUgX5WPYFWwmvZEwDlptlt/PJyc38a8oLlzjM/01yS9"
                        + "8/BU07P8lSOPV5Gi8SocSloyEMrWXnWR5eIdLDWac/qHdoga1WbBsPVupBfXTWma"
                        + "zuaCAk8TF2/d8+6HiXyhRjS5TVckiidnau2id2cWk6SM9LfusfpmRfHQ/7iUy3AS"
                        + "NbB4LZKlOGiJ5U75Qqj1Bs4Df0Eepa+ahV/zsDeeWy+d1tpmzsePuJgVeoh7yeCq";

            transactionID = DateTime.Now.ToString("yyyyMMddThhmmss");
            timeStamp = DateTime.Now.ToString("yyyyMMddThhmmss"); 
        }
        #endregion
        #region "Public Methods"
        public byte[] eSignWithOTP(byte[] PDFdocument)
        {
            DateTime dttxn = DateTime.Now;
            StringBuilder straddhar = new StringBuilder();
            PdfReader reader;
            PdfStamper stamper;
            string TempFile = string.Empty;
            int PdfPagenumber = 0;
            ArrayList TempFiles;
            byte[] sigbytes = null, paddedSig = null, TemposBytes = null;

            if (!string.IsNullOrEmpty(PDFPassword))
                reader = new PdfReader(PDFdocument, new ASCIIEncoding().GetBytes(PDFPassword));
            else
                reader = new PdfReader(PDFdocument);
            PdfReader.unethicalreading = true;
            PdfPagenumber = reader.NumberOfPages;
            TempFiles = new ArrayList();
            MemoryStream os = null;

            for (int i = 1; i <= PdfPagenumber; i++)
            {
                if (i != 1)
                {
                    if (!string.IsNullOrEmpty(PDFPassword))
                        reader = new PdfReader(TemposBytes, new ASCIIEncoding().GetBytes(PDFPassword));
                    else
                        reader = new PdfReader(TemposBytes);
                    PdfReader.unethicalreading = true;

                    os = new MemoryStream();
                }
                else
                {
                    os = new MemoryStream();
                }


                if (i == SIGNPAGENO)
                {
                    stamper = PdfStamper.CreateSignature(reader, os, '\0', null, true);

                    PdfSignatureAppearance appearance = stamper.SignatureAppearance;
                    appearance.Reason = SIGNATUREREASON;
                    appearance.Location = CITY;
                    appearance.SignDate = DateTime.Now;
                    appearance.Acro6Layers = false;
                    appearance.Image = null;

                    List<iTextSharp.text.Rectangle> rList = new List<iTextSharp.text.Rectangle>();
                    string[] Cordinatespagelevel = CERTLOCATION.Split(';');
                    string[] Pagelevel;
                    int[] pages = new int[Cordinatespagelevel.Length];
                    iTextSharp.text.Rectangle rect = null;
                    for (int j = 0; j < Cordinatespagelevel.Length; j++)
                    {
                        Pagelevel = Cordinatespagelevel[j].Split(',');
                        if (Pagelevel.Length > 1)
                        {
                            pages[j] = Convert.ToInt32(Pagelevel[0]);
                            rect = new iTextSharp.text.Rectangle(Convert.ToInt32(Pagelevel[0]), Convert.ToInt32(Pagelevel[1]), Convert.ToInt32(Pagelevel[2]), Convert.ToInt32(Pagelevel[3]));
                            rList.Add(rect);
                        }
                    }
                    appearance.SetVisibleSignature(rect, i, null);
                }

                int contentEstimated = 8192;
                Dictionary<PdfName, int> exc = new Dictionary<PdfName, int>();
                exc[PdfName.CONTENTS] = contentEstimated * 2 + 2;
                PdfSignature dic = new PdfSignature(PdfName.ADOBE_PPKLITE, PdfName.ADBE_PKCS7_DETACHED);
                dic.Reason = appearance.Reason;
                dic.Location = appearance.Location;
                dic.Contact = appearance.Contact;
                dic.Date = new PdfDate(appearance.SignDate);
                appearance.CryptoDictionary = dic;
                appearance.PreClose(exc);

                if (i == 1)
                {
                    Stream ostr = appearance.GetRangeStream();
                    HashAlgorithm sha = new SHA256CryptoServiceProvider();
                    int read = 0;
                    byte[] buff = new byte[contentEstimated];
                    while ((read = ostr.Read(buff, 0, contentEstimated)) > 0)
                    {
                        sha.TransformBlock(buff, 0, read, buff, 0);
                    }
                    sha.TransformFinalBlock(buff, 0, 0);
                    byte[] hashd = Org.BouncyCastle.Utilities.Encoders.Hex.Encode(sha.Hash);

                    //eSign Start
                    string hashdocument = Encoding.UTF8.GetString(hashd, 0, hashd.Length);
                    string AADHARXML = GetAadhaarXML();
                    string BASE64AadhaarXML = Convert.ToBase64String(new System.Text.ASCIIEncoding().GetBytes(AADHARXML));
                    straddhar.Append("<Esign ver=\"1.0\" sc=\"Y\" aspId=\"" + ASPID + "\" esignClass=\"" + "1" + "\" ts=\"" + timeStamp + "\" txn=\"" + transactionID + "\">");
                    straddhar.Append("<Input>" + hashdocument + "</Input>");
                    straddhar.Append("<Aadhaar>" + BASE64AadhaarXML + "</Aadhaar>");
                    straddhar.Append("</Esign>");
                    requestXML = straddhar.ToString();

                    if (!string.IsNullOrEmpty(PFXPath))
                        requestXML = SignXML(requestXML);

                    string URL = eSignURL;

                    if (!string.IsNullOrEmpty(URL) && !string.IsNullOrEmpty(requestXML))
                    {
                        responseXML = HttpsWebClientSendSMS(URL, System.Web.HttpUtility.UrlEncode(requestXML));
                        var xml = new XmlDocument();
                        xml.LoadXml(responseXML);

                        XmlNode EsignResp = xml.SelectSingleNode("EsignResp");

                        if (EsignResp.Attributes["errCode"].Value != string.Empty)
                            return null;

                        sigbytes = SignDocument(responseXML.ToString(), PDFdocument);
                        paddedSig = new byte[contentEstimated];

                        Array.Copy(sigbytes, 0, paddedSig, 0, sigbytes.Length);
                        PdfDictionary dic2 = new PdfDictionary();
                        dic2.Put(PdfName.CONTENTS, new PdfString(paddedSig).SetHexWriting(true));

                        appearance.Close(dic2);

                        TemposBytes = os.ToArray();
                    }
                }
                else
                {
                    PdfDictionary dic2 = new PdfDictionary();
                    dic2.Put(PdfName.CONTENTS, new PdfString(paddedSig).SetHexWriting(true));

                    appearance.Close(dic2);
                    TemposBytes = os.ToArray();
                }
            }
            return os.ToArray();
        }
        #endregion

        #region "Private Methods"
        private string GetAadhaarXML()
        {
            string PIDXML = GetPIDXML();
            StringBuilder aadhaar = new StringBuilder();
            byte[] SessionKey = getNewSessionKey();
            string Base64UIDAIPublicKeyEncryption = encryptWithPublicKey(SessionKey);
            string BASE64SessionKeyAesEncrytionPkcs7Ecb = Convert.ToBase64String(EncryptDataAES(new System.Text.ASCIIEncoding().GetBytes(PIDXML), SessionKey));
            string Base64SessionKeyAesEncrytionPkcs7EcbSHA256Hash = Convert.ToBase64String(EncryptDataAES(Generatehash256(PIDXML), SessionKey));

            aadhaar.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            aadhaar.Append("<Auth xmlns=\"http://www.uidai.gov.in/authentication/uid-auth-request/1.0\" uid=\"" + AadharNumber + "\" tid=\"public\" ver=\"1.6\" >");
            aadhaar.Append("<Meta fdc=\"NC\" idc=\"NA\" lot=\"P\" lov=\"560103\" pip=\"NA\" udc=\"UIDAI:Device:1\"/>");
            aadhaar.Append("<Skey ci=\"20150805\">" + Base64UIDAIPublicKeyEncryption + "</Skey>");
            aadhaar.Append("<Data type=\"X\">" + BASE64SessionKeyAesEncrytionPkcs7Ecb + "</Data>");
            aadhaar.Append("<Hmac>" + Base64SessionKeyAesEncrytionPkcs7EcbSHA256Hash + "</Hmac>");
            aadhaar.Append("</Auth>");
            return aadhaar.ToString();
        }

        private string encryptWithPublicKey(byte[] stringToEncrypt)
        {
            String UIDAICertData = UIDAI_cer;
            UIDAICertData = UIDAICertData.Replace("-----BEGIN CERTIFICATE-----", string.Empty).Replace("-----END CERTIFICATE-----", string.Empty);
            byte[] CertData = Convert.FromBase64String(UIDAICertData);
            X509Certificate2 certificate = new X509Certificate2(CertData); 
            byte[] cipherbytes = Convert.FromBase64String(Convert.ToBase64String(stringToEncrypt));
            RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)certificate.PublicKey.Key;
            byte[] cipher = rsa.Encrypt(cipherbytes, false);
            return Convert.ToBase64String(cipher);
        }

        private string GetPIDXML()
        {
            StringBuilder pidxml = new StringBuilder();
            pidxml.Append("<Pid xmlns=\"http://www.uidai.gov.in/authentication/uid-auth-request-data/1.0\" ts=\"" + timeStamp + "\" ver=\"1.0\">");
            pidxml.Append("<Pv otp=\"" + OTP + "\"/>");
            pidxml.Append("</Pid>");
            return pidxml.ToString();
        }

        private byte[] getNewSessionKey()
        {
            using (Rijndael myAes = RijndaelManaged.Create("Rijndael"))
            {
                myAes.KeySize = 256;
                myAes.GenerateKey();
                return myAes.Key;
            }
        }

        private byte[] SignDocument(string Response, byte[] PDFdocument)
        {
            String SignedXMLfile = string.Empty;
            XmlDocument responseXML = new XmlDocument();
            if (!string.IsNullOrEmpty(Response))
            {
                responseXML.LoadXml(Response.Trim());
            }
            XmlNode Usercertificate = responseXML.SelectSingleNode("//UserX509Certificate");
            String userCertificate = string.Empty;

            if (Usercertificate != null)
                userCertificate = Usercertificate.InnerText;

            if (!string.IsNullOrEmpty(userCertificate))
            {
                X509Certificate2 certificate = new X509Certificate2();
                certificate.Import(new System.Text.ASCIIEncoding().GetBytes(userCertificate));
                XmlNode Signedhash = responseXML.SelectSingleNode("//Pkcs7Response");
                String signedHash = Signedhash.InnerText;

                X509Certificate2 SignedPkcs7certificate = new X509Certificate2();
                SignedPkcs7certificate.Import(Org.BouncyCastle.Utilities.Encoders.Base64.Decode(signedHash));

                return Org.BouncyCastle.Utilities.Encoders.Base64.Decode(signedHash);
            }
            return null;
        }

        private static String HttpsWebClientSendSMS(string URI, string queryString)
        {
            string result = string.Empty;
            WebClient webclient = null;
            webclient = new WebClient();
            webclient.Headers[HttpRequestHeader.ContentType] = "application/x-www-form-urlencoded";
            result = webclient.UploadString(URI, queryString);
            return (result);
        }

        private String SignXML(String XMLValue)
        {
            string SignedXML = string.Empty;
            X509Certificate2 Cert = new System.Security.Cryptography.X509Certificates.X509Certificate2();

            CryptoConfig.AddAlgorithm(typeof(Security.Cryptography.RSAPKCS1SHA256SignatureDescription), "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256");
            Cert = new X509Certificate2(PFXPath, PFXPassword, X509KeyStorageFlags.Exportable);

            XmlDocument Document = new XmlDocument();
            Document.LoadXml(XMLValue);

            // Export private key from cert.PrivateKey and import into a PROV_RSA_AES provider:
            var exportedKeyMaterial = Cert.PrivateKey.ToXmlString( /* includePrivateParameters = */ true);
            var key = new RSACryptoServiceProvider();
            key.PersistKeyInCsp = false;
            key.FromXmlString(exportedKeyMaterial);

            SignedXml signedXml = new SignedXml(Document);
            signedXml.SigningKey = key;

            // Add a signing reference, the uri is empty and so the whole document 
            // is signed. 
            Reference reference = new Reference();
            reference.AddTransform(new XmlDsigEnvelopedSignatureTransform());
            reference.Uri = "";
            signedXml.AddReference(reference);

            // Add the certificate as key info, because of this the certificate 
            // with the public key will be added in the signature part. 
            KeyInfo keyInfo = new KeyInfo();
            keyInfo.AddClause(new KeyInfoX509Data(Cert));
            signedXml.KeyInfo = keyInfo;

            // Generate the signature. 
            signedXml.ComputeSignature();

            // Get the XML representation of the signature and save 
            // it to an XmlElement object.
            XmlElement xmlDigitalSignature = signedXml.GetXml();

            Document.DocumentElement.AppendChild(
            Document.ImportNode(xmlDigitalSignature, true));

            SignedXML = Document.OuterXml;
            return SignedXML;
        }

        private static byte[] EncryptDataAES(byte[] toEncrypt, byte[] key)
        {
            IBufferedCipher cipher = CipherUtilities.GetCipher("AES/ECB/PKCS7");
            byte[] iv = { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                                                        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                                                        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                                                        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };

            cipher.Init(true, new KeyParameter(key));

            int outputSize = cipher.GetOutputSize(toEncrypt.Length);
            byte[] tempOP = new byte[outputSize];
            int processLen = cipher.ProcessBytes(toEncrypt, 0, toEncrypt.Length, tempOP, 0);
            int outputLen = cipher.DoFinal(tempOP, processLen);

            byte[] result = new byte[processLen + outputLen];
            System.Array.Copy(tempOP, 0, result, 0, result.Length);
            return result;
        }

        private static byte[] Generatehash256(string text)
        {
            byte[] message = Encoding.UTF8.GetBytes(text);

            UnicodeEncoding UE = new UnicodeEncoding();
            byte[] hashValue;
            SHA256Managed hashString = new SHA256Managed();
            hashValue = hashString.ComputeHash(message);
            return hashValue;
        }

        #endregion
    }
}
